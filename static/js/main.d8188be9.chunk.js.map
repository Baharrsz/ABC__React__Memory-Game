{"version":3,"sources":["components/Nav.js","components/DisplayCards.js","components/Dialogue.js","components/Celebration.js","helpers.js","components/Instructions.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","score","resetGame","showInstructions","className","onClick","DisplayCards","cards","display","matching","cardClick","animatingCards","cardElements","map","card","length","includes","id","style","backgroundColor","color","Dialogue","chooseGame","show","closeDialogue","onSubmit","type","value","name","defaultChecked","Celebration","endCelebration","createCards","cardNum","colors","sArray","h","Math","floor","random","i","s","l","push","colorPicker","array","order","Array","keys","shuffled","forEach","element","splice","shuffle","concat","idx","calculateScore","matched","clickCount","steps","ceil","toFixed","Instructions","hide","App","props","click","target","classList","contains","state","len","last","find","beforeLast","setState","slice","clickedClr","showCelebration","cardId","intervalId","setInterval","clearInterval","prevState","openPopUp","showDialogue","closePopUp","windowName","update","hideInstructions","submit","preventDefault","difficulty","undefined","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8188be9.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Nav({ score, resetGame, showInstructions }) {\n  return (\n    <nav className=\"nav\">\n      <span className=\"nav__title\">Memory Game</span>\n      <span className=\"nav__score\">Score: {score}</span>\n      <div className=\"nav__btns\">\n        <button className=\"button nav__new-game\" onClick={resetGame}>\n          New Game\n        </button>\n        <button className=\"nav__question\" onClick={showInstructions}></button>\n      </div>\n    </nav>\n  );\n}\n","import React from \"react\";\n\nfunction DisplayCards({ cards, display, matching, cardClick, animatingCards }) {\n  let cardElements = cards.map((card) => {\n    let className = `card card--${cards.length} `;\n    className += display.includes(card.id) ? \"card--display \" : \"card--hide \";\n    className += matching.includes(card.id) ? \"card--matching \" : \"\";\n    className += animatingCards.includes(card.id) ? \"card--animation\" : \"\";\n    return (\n      <div\n        className={className}\n        style={{ backgroundColor: card.color }}\n        id={card.id}\n        key={card.id}\n        onClick={cardClick}\n      ></div>\n    );\n  });\n\n  return <div className={`deck deck--${cards.length}`}>{cardElements}</div>;\n}\n\nexport default DisplayCards;\n","import React from \"react\";\n\nfunction Dialogue({ chooseGame, show, closeDialogue }) {\n  const display = { display: show ? \"flex\" : \"none\" };\n  return (\n    <div className=\"dialogue\" style={display}>\n      <div className=\"dialogue__outside\" onClick={closeDialogue}></div>\n      <form className=\"dialogue__form\" onSubmit={chooseGame}>\n        <button\n          className=\"dialogue__closeBtn\"\n          type=\"button\"\n          onClick={closeDialogue}\n        ></button>\n        <label className=\"dialogue__label dialogue__label--main\">\n          Choose the difficulty level:\n        </label>\n        <div className=\"dialogue__options\">\n          <label className=\"dialogue__label\">\n            <input\n              type=\"radio\"\n              value=\"20\"\n              name=\"difficulty\"\n              defaultChecked={true}\n            />\n            Easy (20 cards)\n          </label>\n          <label className=\"dialogue__label\">\n            <input type=\"radio\" value=\"30\" name=\"difficulty\" /> Medium (30\n            cards)\n          </label>\n          <label className=\"dialogue__label\">\n            <input type=\"radio\" value=\"50\" name=\"difficulty\" /> Hard (50 cards)\n          </label>\n          <label className=\"dialogue__label\">\n            <input type=\"radio\" value=\"70\" name=\"difficulty\" /> Very Hard (70\n            cards)\n          </label>\n          <label className=\"dialogue__label\">\n            <input type=\"radio\" value=\"100\" name=\"difficulty\" /> Evil (100\n            cards)\n          </label>\n        </div>\n        <button className=\"dialogue__startBtn button\" type=\"submit\">\n          Start Game\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default Dialogue;\n","import React from \"react\";\n\nexport default function Celebration({ endCelebration, score }) {\n  return (\n    <div className=\"celebration\" onClick={endCelebration}>\n      <h1 className=\"celebration__main\">You Won!</h1>\n      <p className=\"celebration__score\">Score: {score}</p>\n      <p className=\"celebration__click\">Click to start a new game</p>\n    </div>\n  );\n}\n","function shuffle(array) {\n  let order = [...Array(array.length).keys()];\n  let shuffled = [];\n  array.forEach((element) => {\n    let i = Math.floor(Math.random() * order.length);\n    shuffled[order[i]] = element;\n    order.splice(i, 1);\n  });\n  return shuffled;\n}\n\nfunction colorPicker(cardNum) {\n  let colors = [];\n  let sArray = [20, 40, 60, 80, 100];\n  let h = Math.floor(Math.random() * (360 / cardNum));\n  for (let i = 0; i < cardNum; i++) {\n    h = h + Math.floor(360 / cardNum);\n    let s = sArray[i % 4];\n    let l = 20 + Math.floor(Math.random() * 60);\n\n    colors.push(`hsl(${h}, ${s}%, ${l}%)`);\n  }\n  return colors;\n}\n\nfunction createCards(cardNum) {\n  cardNum = cardNum / 2;\n  let colors = colorPicker(cardNum);\n  colors = colors.concat(colors);\n\n  return shuffle(colors.map((color, idx) => ({ id: `_${idx}`, color: color })));\n}\n\nfunction calculateScore(matched, score, clickCount, cardNum) {\n  let steps = Math.ceil(clickCount / (2 * cardNum));\n  const increment = matched ? 100 / cardNum : -(100 / (2 * cardNum * steps));\n  return +(score + increment).toFixed(1);\n}\n\nexport { createCards, calculateScore };\n","import React from \"react\";\n\nexport default function Instructions({ display, hide }) {\n  return !display ? (\n    <></>\n  ) : (\n    <div className=\"instructions\">\n      <div className=\"instructions__background\" onClick={hide}></div>\n      <div className=\"instructions__main\">\n        <p className=\"instructions__text\">\n          Click on a card to see its colour. There are two cards from each\n          colour.\n        </p>\n        <p className=\"instructions__text\">\n          Match all cards with the same colour to win the game.\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./styles/main.css\";\nimport Nav from \"./components/Nav\";\nimport DisplayCards from \"./components/DisplayCards\";\nimport Dialogue from \"./components/Dialogue\";\nimport Celebration from \"./components/Celebration\";\nimport { createCards, calculateScore } from \"./helpers\";\nimport Instructions from \"./components/Instructions\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.intervalId = undefined;\n    this.state = {\n      cards: createCards(20),\n      display: [],\n      matching: [],\n      showDialogue: false,\n      showCelebration: false,\n      showInstructions: false,\n      clickCount: 0,\n      score: 100,\n      animatingCards: [],\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav\n          score={this.state.score}\n          resetGame={this.openPopUp}\n          showInstructions={this.showInstructions}\n        />\n\n        <Instructions\n          display={this.state.showInstructions}\n          hide={this.hideInstructions}\n        />\n\n        <DisplayCards\n          cards={this.state.cards}\n          display={this.state.display}\n          matching={this.state.matching}\n          cardClick={this.cardClick}\n          animatingCards={this.state.animatingCards}\n        />\n        <Dialogue\n          chooseGame={this.chooseGame}\n          closeDialogue={() => this.closePopUp(\"Dialogue\")}\n          show={this.state.showDialogue}\n        />\n        {!this.state.showCelebration ? null : (\n          <Celebration\n            // show={this.state.showCelebration}\n            endCelebration={() => {\n              this.closePopUp(\"Celebration\");\n              this.openPopUp();\n            }}\n            score={this.state.score}\n          />\n        )}\n      </div>\n    );\n  }\n\n  cardClick = (click) => {\n    //Ignoring clicks on cards that are displaying\n    if (click.target.classList.contains(\"card--display\")) return;\n\n    const { cards, display } = this.state;\n    const len = display.length;\n\n    let last = cards.find((card) => card.id === display[len - 1]);\n\n    let beforeLast = cards.find((card) => card.id === display[len - 2]);\n\n    //Showing and hiding cards\n    if (\n      len % 2 === 1 ||\n      (last && last.color) === (beforeLast && beforeLast.color)\n    ) {\n      this.setState({ display: [...display, click.target.id] });\n    } else\n      this.setState({\n        display: [...display.slice(0, len - 2), click.target.id],\n      });\n\n    //Animation of matching cards and final celebration\n    let matched = false;\n    let clickedClr = cards.find((card) => card.id === click.target.id).color;\n    if (len % 2 === 1 && last.color === clickedClr) {\n      matched = true;\n      this.setState({ matching: [last.id, click.target.id] }, () => {\n        if (this.state.display.length === cards.length) {\n          this.setState({ showCelebration: true });\n\n          //celebration animation\n          let cardId = cards.length;\n          this.intervalId = setInterval(() => {\n            cardId--;\n            if (cardId === 0) clearInterval(this.intervalId);\n            this.setState({\n              animatingCards: [...this.state.animatingCards, `_${cardId}`],\n            });\n          }, 1000);\n        }\n      });\n    }\n\n    //Updating the score\n    this.setState(\n      (prevState) => {\n        return { clickCount: prevState.clickCount + 1 };\n      },\n      () => {\n        this.setState((prevState) => {\n          return {\n            score: calculateScore(\n              matched,\n              prevState.score,\n              this.state.clickCount,\n              this.state.cards.length\n            ),\n          };\n        });\n      }\n    );\n  };\n\n  openPopUp = () => this.setState({ showDialogue: true });\n\n  closePopUp = (windowName) => {\n    let update = {};\n    update[`show${windowName}`] = false;\n    this.setState(update);\n  };\n\n  showInstructions = () => this.setState({ showInstructions: true });\n  hideInstructions = () => this.setState({ showInstructions: false });\n\n  chooseGame = (submit) => {\n    submit.preventDefault();\n\n    //Stop celebration animation from the previous game\n    clearInterval(this.intervalId);\n\n    //Reset the game\n    const cardNum = submit.target.difficulty.value;\n    this.setState({\n      cards: createCards(cardNum),\n      display: [],\n      matching: [],\n      showDialogue: false,\n      showCelebration: false,\n      clickCount: 0,\n      score: 100,\n      animatingCards: [],\n    });\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}